{"version":3,"sources":["components/SideDrawer/DrawerToggleButton.js","components/Toolbar/Toolbar.js","components/SideDrawer/SideDrawer.js","components/Backdrop/Backdrop.js","App.js","serviceWorker.js","index.js"],"names":["drawerToggleButton","props","className","onClick","click","toolBar","drawerClickHandler","href","sideDrawer","drawerClasses","show","join","backdrop","App","drawerToggleClickHandler","setState","prevState","sideDrawerOpen","backdropClickHandler","state","this","style","height","marginTop","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uVAceA,G,MAVU,SAAAC,GAAK,OAC1B,4BAAQC,UAAU,gBAAgBC,QAASF,EAAMG,OAC7C,yBAAKF,UAAU,uBACf,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,0BCeRG,G,MAhBD,SAAAJ,GAAK,OACf,4BAAQC,UAAU,WACd,yBAAKA,UAAU,eACX,yBAAKA,UAAU,yBAAwB,kBAAC,EAAD,CAAoBE,MAAOH,EAAMK,sBACxE,yBAAKJ,UAAU,gBAAe,uBAAGK,KAAK,KAAR,aAC9B,yBAAKL,UAAU,WACf,yBAAKA,UAAU,qBACX,4BACI,4BAAI,uBAAGK,KAAK,KAAR,aACJ,4BAAI,uBAAGA,KAAK,KAAR,gBCGTC,G,MAfE,SAAAP,GACb,IAAIQ,EAAc,CAAC,eAInB,OAHGR,EAAMS,OACLD,EAAc,CAAC,cAAc,SAG7B,yBAAKP,UAAWO,EAAcE,KAAK,MAC/B,4BACI,4BAAI,uBAAGJ,KAAK,KAAR,aACJ,4BAAI,uBAAGA,KAAK,KAAR,cCLLK,G,MAJA,SAAAX,GAAK,OAChB,yBAAKC,UAAU,WAAWC,QAASF,EAAMG,UC4C9BS,E,YA1Cb,WAAYZ,GAAO,IAAD,8BAChB,4CAAMA,KAMRa,yBAAyB,WACvB,EAAKC,UAAS,SAAAC,GACZ,MAAM,CACJC,gBAAiBD,EAAUC,oBAVf,EAelBC,qBAAqB,WACnB,EAAKH,SAAS,CACZE,gBAAgB,KAflB,EAAKE,MAAM,CACTF,gBAAgB,GAHF,E,sEAuBhB,IACIL,EAKJ,OAJGQ,KAAKD,MAAMF,iBACZL,EAAS,kBAAC,EAAD,CAAUR,MAAOgB,KAAKF,wBAI/B,yBAAKG,MAAO,CAACC,OAAQ,SACnB,kBAAC,EAAD,CAAShB,mBAAoBc,KAAKN,2BAClC,kBAAC,EAAD,CAAYJ,KAAMU,KAAKD,MAAMF,iBAC5BL,EACD,0BAAMS,MAAO,CAACE,UAAW,SACvB,6D,GArCQC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.35923a68.chunk.js","sourcesContent":["import React from 'react';\n\nimport './DrawerToggleButton.css';\n\nconst drawerToggleButton=props=>(\n    <button className=\"toggle-button\" onClick={props.click}>\n        <div className=\"toggle-button-line\"/>\n        <div className=\"toggle-button-line\"/>\n        <div className=\"toggle-button-line\"/>\n    </button>\n);\n\n\n\nexport default drawerToggleButton;","import React from 'react';\nimport DrawerToggleButton from '../SideDrawer/DrawerToggleButton';\n\n\nimport './Toolbar.css';\n\n\nconst toolBar=props=>(\n    <header className=\"toolbar\">\n        <nav className=\"toolbar-nav\">\n            <div className=\"toolbar-toggle-button\"><DrawerToggleButton click={props.drawerClickHandler}/></div>\n            <div className=\"toolbar-logo\"><a href=\"/\">The Logo</a></div>\n            <div className=\"spacer\"/>\n            <div className=\"toolbar-nav-items\">\n                <ul>\n                    <li><a href=\"/\">Products</a></li>\n                    <li><a href=\"/\">Users</a></li>\n                </ul>\n            </div>\n        </nav>\n    </header>\n);\n\nexport default toolBar;","import React from 'react';\n\nimport './SideDrawer.css';\n\nconst sideDrawer=props=>{\n    let drawerClasses=[\"side-drawer\"];\n    if(props.show){\n        drawerClasses=[\"side-drawer\",\"open\"];\n    }\n    return (\n        <nav className={drawerClasses.join(' ')}>\n            <ul>\n                <li><a href=\"/\">Products</a></li>\n                <li><a href=\"/\">Users</a></li>\n            </ul>\n        </nav>\n    );\n};\n\nexport default sideDrawer;","import React from 'react';\n\nimport './Backdrop.css';\n\nconst backdrop=props=>(\n    <div className=\"backdrop\" onClick={props.click}/>\n);\n\nexport default backdrop;","import React, { Component } from 'react';\nimport Toolbar from './components/Toolbar/Toolbar';\nimport SideDrawer from './components/SideDrawer/SideDrawer';\nimport Backdrop from './components/Backdrop/Backdrop';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state={\n      sideDrawerOpen: false\n    };\n  }\n  \n  drawerToggleClickHandler=()=>{\n    this.setState(prevState=>{\n      return{\n        sideDrawerOpen: !prevState.sideDrawerOpen\n      };\n    });\n  };\n\n  backdropClickHandler=()=>{\n    this.setState({\n      sideDrawerOpen: false\n    });\n  };\n\n  render(){\n\n    let sideDrawer;\n    let backdrop;\n    if(this.state.sideDrawerOpen){\n      backdrop=<Backdrop click={this.backdropClickHandler}/>;\n    }\n\n    return (\n      <div style={{height: '100%'}}>\n        <Toolbar drawerClickHandler={this.drawerToggleClickHandler}/>\n        <SideDrawer show={this.state.sideDrawerOpen}/>\n        {backdrop}\n        <main style={{marginTop: '64px'}}>\n          <p>This is the page content</p>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}